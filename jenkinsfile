def getAccountID() 
{
    if ( "${GIT_BRANCH}" == "dev" ) 
    {
       return "${DEV_AWS_ACCOUNT_ID}"
    }
    else
    {
        return "${PROD_AWS_ACCOUNT_ID}"
    }
}

pipeline 
{ 
   agent any
   
   environment 
   {

    AWS_ACCOUNT_ID = getAccountID()
    IAM_ROLE="adminRole"
   }

   stages 
   {
     stage('AWS-Config') 
     { 
        steps 
        {             
           sh " echo $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role --role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/${IAM_ROLE} --role-session-name terraform --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" --output text)) | tr ' ' '\n' > .aws-creds"
        }
     }   
     stage('Terraform Init-Validate-Plan') 
     { 
        steps 
        {             
           sh """
                set -a
                source .aws-creds
                set +a
                
                # Terraform commands to initialize, validate and run a plan of terraform code 
                cd terraform/env/${GIT_BRANCH}
                terraform init -backend-config="key=terraform-tfstate/env/${GIT_BRANCH}/terraform.tfstate" -no-color
                terraform validate -no-color
                terraform plan  -no-color
           """
        }
     }

     stage('Waiting for Approvals') 
     {
        steps
        {
            input('Plan Validated? Please approve to create resources in AWS?')	  
        }
     }    
     
     
     stage('Terraform Apply') 
     { 
        steps 
        {         
            sh """
                set -a 
                source .aws-creds
                set +a

                # Run terraform apply to create resources on target cloud
                cd terraform/env/${GIT_BRANCH} 
                terraform apply -auto-approve -no-color
           """
        }
     }

     stage('Run Glue Workflow Pipeline') 
     { 
        steps 
        {         
            sh """
                set -a 
                source .aws-creds
                set +a
 
                # Trigger etl workflow pipeline
                cd terraform/env/${GIT_BRANCH}
                export region_id=`cat terraform.tfvars | grep -w region | head -1 | cut -d "=" -f2 | tr -d '"' | tr -d ' '`
                export glue_workflow=`cat terraform.tfvars | grep -w glue_workflow_name | head -1 | cut -d "=" -f2 | tr -d '"' | tr -d ' '`
                echo "Region = \${region_id}"
                echo "Glue-Workflow = \${glue_workflow}"
                aws glue start-workflow-run --name \${glue_workflow} --region \${region_id}
           """
        }
   	}
   }
}
