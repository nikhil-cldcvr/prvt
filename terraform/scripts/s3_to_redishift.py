

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext,DynamicFrame
from pyspark.sql import SparkSession
from pyspark.sql.functions import current_timestamp, col, lit, expr, when
from awsglue.job import Job

## @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "s3_incorta", table_name = "incorta_raw_data", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "s3_incorta", table_name = "incorta_raw_data", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("vendor_name", "string", "vendorname", "string"), ("award_to_number", "string", "contractnumber", "string"), ("tas", "string", "tas", "string"), ("additional_info", "string", "additional_info", "string"), ("transaction_number", "string", "transaction_number", "string"), ("period_num", "long", "period_num", "long"), ("tas_end_year", "long", "tasendyear", "int"), ("period_name", "string", "period_name", "string"), ("invoice_date", "timestamp", "invoicedate", "timestamp"), ("bfy", "string", "bfy", "string"), ("s_ns", "string", "sns", "string"), ("project_owner_code", "string", "project_owner_code", "string"), ("clin_description", "string", "clin_description", "string"), ("supplier_number", "string", "supplier_number", "string"), ("ipp_invoice_flag", "string", "ipp_invoice_flag", "string"), ("project", "string", "project", "string"), ("period_year", "long", "period_year", "int"), ("mod_number", "string", "modnum", "string"), ("project_org_code", "string", "orgcode", "string"), ("release_year", "string", "releaseyear", "string"), ("invoice_paid_status", "string", "invpaidstatus", "string"), ("contract_type", "string", "contracttype", "string"), ("can", "string", "can", "string"), ("po_number", "string", "ponumber", "string"), ("expiration_date", "timestamp", "expiration_date", "timestamp"), ("recon_flag", "string", "reconflag", "string"), ("payment_amount", "double", "paymentamount", "double"), ("admincontrol", "string", "admincontrol", "string"), ("document_number", "string", "documentnumber", "string"), ("invoice_received_date", "timestamp", "invoice_received_date", "timestamp"), ("cancellation_date", "timestamp", "cancellation_date", "timestamp"), ("award_date", "string", "award_date", "timestamp"), ("contract_officer", "string", "contract_officer", "string"), ("contracting_officer_representative", "string", "contracting_officer_representative", "string"), ("clin", "string", "clin", "string"), ("oc", "string", "oc", "string"), ("payment_terms", "string", "payment_terms", "string"), ("payment_sch_number", "string", "payment_sch_number", "string"), ("unexpended_amount", "double", "unexpendedamount", "double"), ("fund_value", "string", "fundvalue", "string"), ("transaction_date", "date", "transactiondate", "timestamp"), ("funding_source", "string", "funding_source", "string"), ("invoice_number", "string", "invoicenumber", "string"), ("transaction_type", "string", "transactiontype", "string"), ("vendor_site_code", "string", "vendorsitecode", "string"), ("bap", "string", "bap", "string"), ("sent_to_ipp_flag", "string", "inippflag", "string"), ("contract_specialist", "string", "contract_specialist", "string"), ("obligation_amount", "double", "obligationamount", "double"), ("invoice_amount", "double", "invoiceamount", "double"), ("option_year", "string", "optionyear", "string"), ("requisition_number_acn", "string", "requisitionnumber", "string"), ("invoice_source", "string", "source", "string"), ("pop_end_date", "string", "popenddate", "timestamp"), ("tas_canc_year", "string", "tascancelyear", "int"), ("pop_start_date", "string", "popstartdate", "timestamp")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
##applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("vendor_name", "string", "vendorname", "string"), ("award_to_number", "string", "contractnumber", "string"), ("tas", "string", "tas", "string"), ("additional_info", "string", "additional_info", "string"), ("transaction_number", "string", "transaction_number", "string"), ("period_num", "long", "period_num", "long"), ("tas_end_year", "long", "tasendyear", "int"), ("period_name", "string", "period_name", "string"), ("invoice_date", "timestamp", "invoicedate", "timestamp"), ("bfy", "string", "bfy", "string"), ("s_ns", "string", "sns", "string"), ("project_owner_code", "string", "project_owner_code", "string"), ("clin_description", "string", "clin_description", "string"), ("supplier_number", "string", "supplier_number", "string"), ("ipp_invoice_flag", "string", "ipp_invoice_flag", "string"), ("project", "string", "project", "string"), ("period_year", "long", "period_year", "int"), ("mod_number", "string", "modnum", "string"), ("project_org_code", "string", "orgcode", "string"), ("release_year", "string", "releaseyear", "string"), ("invoice_paid_status", "string", "invpaidstatus", "string"), ("contract_type", "string", "contracttype", "string"), ("can", "string", "can", "string"), ("po_number", "string", "ponumber", "string"), ("expiration_date", "timestamp", "expiration_date", "timestamp"), ("recon_flag", "string", "reconflag", "string"), ("payment_amount", "double", "paymentamount", "double"), ("admincontrol", "string", "admincontrol", "string"), ("document_number", "string", "documentnumber", "string"), ("invoice_received_date", "timestamp", "invoice_received_date", "timestamp"), ("cancellation_date", "timestamp", "cancellation_date", "timestamp"), ("award_date", "string", "award_date", "timestamp"), ("contract_officer", "string", "contract_officer", "string"), ("contracting_officer_representative", "string", "contracting_officer_representative", "string"), ("clin", "string", "clin", "string"), ("oc", "string", "oc", "string"), ("payment_terms", "string", "payment_terms", "string"), ("payment_sch_number", "string", "payment_sch_number", "string"), ("unexpended_amount", "double", "unexpendedamount", "double"), ("fund_value", "string", "fundvalue", "string"), ("transaction_date", "date", "transactiondate", "timestamp"), ("funding_source", "string", "funding_source", "string"), ("invoice_number", "string", "invoicenumber", "string"), ("transaction_type", "string", "transactiontype", "string"), ("vendor_site_code", "string", "vendorsitecode", "string"), ("bap", "string", "bap", "string"), ("sent_to_ipp_flag", "string", "inippflag", "string"), ("contract_specialist", "string", "contract_specialist", "string"), ("obligation_amount", "double", "obligationamount", "double"), ("invoice_amount", "double", "invoiceamount", "double"), ("option_year", "string", "optionyear", "string"), ("requisition_number_acn", "string", "requisitionnumber", "string"), ("invoice_source", "string", "source", "string"), ("pop_end_date", "string", "popenddate", "timestamp"), ("tas_canc_year", "string", "tascancelyear", "int"), ("pop_start_date", "string", "popstartdate", "timestamp")], transformation_ctx = "applymapping1")
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("vendor_name", "string", "vendorname", "string"), ("award_to_number", "string", "contractnumber", "string"), ("tas", "string", "tas", "string"), ("additional_info", "string", "additional_info", "string"), ("transaction_number", "string", "transaction_number", "string"), ("period_num", "long", "period_num", "long"), ("tas_end_year", "long", "tasendyear", "int"), ("period_name", "string", "period_name", "string"), ("invoice_date", "timestamp", "invoicedate", "timestamp"), ("bfy", "string", "bfy", "string"), ("s_ns", "string", "sns", "string"), ("project_owner_code", "string", "project_owner_code", "string"), ("clin_description", "string", "clin_description", "string"), ("supplier_number", "string", "supplier_number", "string"), ("ipp_invoice_flag", "string", "ipp_invoice_flag", "string"), ("project", "string", "project", "string"), ("period_year", "long", "period_year", "int"), ("mod_number", "string", "modnum", "string"), ("project_org_code", "string", "orgcode", "string"), ("release_year", "string", "releaseyear", "string"), ("invoice_paid_status", "string", "invpaidstatus", "string"), ("integration_id", "string", "int_key", "string"),("contract_type", "string", "contracttype", "string"), ("can", "string", "can", "string"), ("po_number", "string", "ponumber", "string"), ("expiration_date", "timestamp", "expiration_date", "timestamp"), ("recon_flag", "string", "reconflag", "string"), ("payment_amount", "double", "paymentamount", "double"), ("last_updated_date_time", "timestamp", "last_updated_date_time", "timestamp"), ("admincontrol", "string", "admincontrol", "string"), ("document_number", "string", "documentnumber", "string"), ("invoice_received_date", "timestamp", "invoice_received_date", "timestamp"), ("cancellation_date", "timestamp", "cancellation_date", "timestamp"), ("award_date", "string", "award_date", "string"), ("contract_officer", "string", "contract_officer", "string"), ("contracting_officer_representative", "string", "contracting_officer_representative", "string"), ("clin", "string", "clin", "string"), ("oc", "string", "oc", "string"), ("payment_terms", "string", "payment_terms", "string"), ("payment_sch_number", "string", "payment_sch_number", "string"), ("unexpended_amount", "double", "unexpendedamount", "double"), ("fund_value", "string", "fundvalue", "string"), ("transaction_date", "date", "transactiondate", "timestamp"), ("funding_source", "string", "funding_source", "string"), ("invoice_number", "string", "invoicenumber", "string"), ("transaction_type", "string", "transactiontype", "string"), ("vendor_site_code", "string", "vendorsitecode", "string"), ("bap", "string", "bap", "string"), ("sent_to_ipp_flag", "string", "inippflag", "string"), ("contract_specialist", "string", "contract_specialist", "string"), ("obligation_amount", "double", "obligationamount", "double"), ("invoice_amount", "double", "invoiceamount", "double"), ("option_year", "string", "optionyear", "string"), ("requisition_number_acn", "string", "requisitionnumber", "string"), ("invoice_source", "string", "source", "string"), ("pop_end_date", "string", "popenddate", "string"), ("tas_canc_year", "string", "tascancelyear", "string"), ("pop_start_date", "string", "popstartdate", "string")], transformation_ctx = "applymapping1")
## @type: SelectFields
## @args: [paths = ["obligationamount", "project", "period_name", "source", "releaseyear", "expiration_date", "modnum", "paymentamount", "bap", "tasendyear", "popenddate", "project_owner_code", "funding_source", "contracting_officer_representative", "invoicenumber", "fundvalue", "last_updated", "invoice_received_date", "tas", "contract_officer", "created_by", "data_source", "cancellation_date", "period_year", "bfy", "contracttype", "unexpendedamount", "additional_info", "contractnumber", "ponumber", "updated_by", "int_key", "vendorname", "supplier_number", "transactiondate", "invpaidstatus", "payment_terms", "transactiontype", "invoiceamount", "tascancelyear", "can", "vendorsitecode", "oc", "latest_flag", "payment_sch_number", "reconflag", "admincontrol", "award_date", "optionyear", "ipp_invoice_flag", "clin", "period_num", "orgcode", "requisitionnumber", "inippflag", "clin_description", "transaction_number", "contract_specialist", "sns", "documentnumber", "created_date", "invoicedate", "popstartdate"], transformation_ctx = "selectfields2"]
## @return: selectfields2
## @inputs: [frame = applymapping1]
##selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["obligationamount", "project", "period_name", "source", "releaseyear", "expiration_date", "modnum", "paymentamount", "bap", "tasendyear", "popenddate", "project_owner_code", "funding_source", "contracting_officer_representative", "invoicenumber", "fundvalue", "invoice_received_date", "tas", "contract_officer", "cancellation_date", "period_year", "bfy", "contracttype", "unexpendedamount", "additional_info", "contractnumber", "ponumber", "vendorname", "supplier_number", "transactiondate", "invpaidstatus", "payment_terms", "transactiontype", "invoiceamount", "tascancelyear", "can", "vendorsitecode", "oc", "payment_sch_number", "reconflag", "admincontrol", "award_date", "optionyear", "ipp_invoice_flag", "clin", "period_num", "orgcode", "requisitionnumber", "inippflag", "clin_description", "transaction_number", "contract_specialist", "sns", "documentnumber", "invoicedate", "popstartdate"], transformation_ctx = "selectfields2")
selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["obligationamount", "project", "period_name", "source", "releaseyear", "expiration_date", "modnum", "paymentamount", "bap", "tasendyear", "popenddate", "project_owner_code", "funding_source", "contracting_officer_representative", "invoicenumber", "fundvalue", "invoice_received_date", "tas", "contract_officer", "cancellation_date", "period_year", "bfy", "contracttype", "unexpendedamount", "additional_info", "contractnumber", "ponumber", "vendorname", "supplier_number", "transactiondate", "invpaidstatus", "payment_terms", "transactiontype", "invoiceamount", "tascancelyear", "can", "vendorsitecode", "oc", "payment_sch_number", "reconflag", "admincontrol", "award_date", "optionyear", "ipp_invoice_flag", "clin", "period_num", "orgcode", "requisitionnumber", "inippflag", "clin_description", "transaction_number", "contract_specialist", "sns", "documentnumber", "invoicedate", "popstartdate","int_key","last_updated_date_time"], transformation_ctx = "selectfields2")
##selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["obligationamount", "project", "period_name", "source", "releaseyear", "expiration_date", "modnum", "paymentamount", "bap", "tasendyear", "popenddate", "project_owner_code", "funding_source", "contracting_officer_representative", "invoicenumber", "fundvalue", "last_updated", "invoice_received_date", "tas", "contract_officer", "created_by", "data_source", "cancellation_date", "period_year", "bfy", "contracttype", "unexpendedamount", "additional_info", "contractnumber", "ponumber", "updated_by", "int_key", "vendorname", "supplier_number", "transactiondate", "invpaidstatus", "payment_terms", "transactiontype", "invoiceamount", "tascancelyear", "can", "vendorsitecode", "oc", "latest_flag", "payment_sch_number", "reconflag", "admincontrol", "award_date", "optionyear", "ipp_invoice_flag", "clin", "period_num", "orgcode", "requisitionnumber", "inippflag", "clin_description", "transaction_number", "contract_specialist", "sns", "documentnumber", "created_date", "invoicedate", "popstartdate"], transformation_ctx = "selectfields2")
## @type: ResolveChoice
## @args: [choice = "MATCH_CATALOG", database = "ospr_redshift", table_name = "coinrsdb_incorta_schema_ofm_incorta", transformation_ctx = "resolvechoice3"]
## @return: resolvechoice3
## @inputs: [frame = selectfields2]
resolvechoice3 = ResolveChoice.apply(frame = selectfields2, choice = "MATCH_CATALOG", database = "ospr_redshift", table_name = "coinrsdb_incorta_schema_ofm_incorta", transformation_ctx = "resolvechoice3")
## @type: ResolveChoice
## @args: [choice = "make_cols", transformation_ctx = "resolvechoice4"]
## @return: resolvechoice4
## @inputs: [frame = resolvechoice3]
resolvechoice4 = ResolveChoice.apply(frame = resolvechoice3, choice = "make_cols", transformation_ctx = "resolvechoice4")

##create those new columns into dataframes resolvechoice4 created_date created_by updated_by last_updated data_source int_key latest_flag
newdataDF = resolvechoice4.toDF().withColumn("created_date", current_timestamp()).withColumn("created_by", lit("incorta_usr")).withColumn("latest_flag", lit("Y")).withColumn("data_source", lit("INCORTA"))
newcolumns5 = DynamicFrame.fromDF(newdataDF, glueContext, "newcolumns5")

## @type: DataSink
## @args: [database = "ospr_redshift", table_name = "coinrsdb_incorta_schema_ofm_incorta", redshift_tmp_dir = TempDir, transformation_ctx = "datasink5"]
## @return: datasink5
## @inputs: [frame = newcolumns5]
datasink6 = glueContext.write_dynamic_frame.from_catalog(frame = newcolumns5, database = "ospr_redshift", table_name = "coinrsdb_incorta_schema_ofm_incorta", redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink6")

job.commit()

